// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Status {
    ACTIVE
    PENDING
    DISABLED
}

model Locale {
    code   String @id
    name   String
    status Status @default(ACTIVE)

    CategoryTranslation CategoryTranslation[]
    BoxTranslation      BoxTranslation[]
    CardTranslation     CardTranslation[]
}

model Category {
    id        String   @id @default(cuid())
    status    Status   @default(ACTIVE)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    CategoryTranslation CategoryTranslation[]
    Box                 Box[]
}

model CategoryTranslation {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String

    locale     Locale @relation(fields: [localeCode], references: [code])
    localeCode String

    @@unique([categoryId, localeCode])
}

model Box {
    id            String   @id @default(cuid())
    image         String? // @db.Text
    status        Status   @default(ACTIVE)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    downloadCount Int      @default(0)

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String

    BoxTranslation BoxTranslation[]
    Card           Card[]
}

model BoxTranslation {
    id            String   @id @default(cuid())
    name          String
    description   String?
    downloadCount Int      @default(0)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    box   Box    @relation(fields: [boxId], references: [id])
    boxId String

    locale     Locale @relation(fields: [localeCode], references: [code])
    localeCode String

    @@unique([boxId, localeCode])
}

model Card {
    id         String   @id @default(cuid())
    status     Status   @default(ACTIVE)
    imageFront String? // @db.Text
    imageBack  String? // @db.Text
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    box   Box    @relation(fields: [boxId], references: [id])
    boxId String

    CardTranslation CardTranslation[]
}

model CardTranslation {
    id        String   @id @default(cuid())
    textFront String // @db.Text
    textBack  String // @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    card   Card   @relation(fields: [cardId], references: [id])
    cardId String

    locale     Locale @relation(fields: [localeCode], references: [code])
    localeCode String

    @@unique([cardId, localeCode])
}

model ApiAccount {
    id        String   @id @default(cuid())
    userId    String
    apiKey    String // @db.Text
    status    Status   @default(ACTIVE)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([apiKey])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    status        Status       @default(ACTIVE)
    accounts      Account[]
    sessions      Session[]
    boxes         Box[]
    ApiAccount    ApiAccount[]
    Category      Category[]
    Card          Card[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
